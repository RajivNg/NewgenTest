{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./../shared/file-upload-service.service\";\nimport * as i2 from \"ngx-spinner\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = [\"attachments\"];\nconst _c1 = [\"uploadModal\"];\nconst _c2 = [\"fileInput\"];\n\nfunction AppComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"div\", 20);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_16_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const index_r5 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.removeSelectedFile(index_r5));\n    });\n    i0.ɵɵtext(4, \" Delete \");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const selected_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(selected_r4);\n  }\n}\n\nfunction AppComponent_p_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 22);\n    i0.ɵɵtext(1, \"Loading...\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(fileUploadService, spinnerService) {\n      this.fileUploadService = fileUploadService;\n      this.spinnerService = spinnerService;\n      this.typeSelected = 'ball-fussion';\n      this.fileList = [];\n      this.listOfFiles = [];\n      this.isLoading = false;\n      this.ActivityID = '';\n      this.EngineName = '';\n      this.ProcessInstanceID = '';\n      this.RouteID = '';\n      this.SessionID = '';\n      this.WorkItemID = '';\n      this.spinnerMessage = 'Please wait while we are uploading your documents';\n      this.caseNo = '';\n      this.interval = 1000;\n      this.allowedExtensions = ['tif', 'tiff', 'jpg', 'jpeg', 'png', 'pdf']; // Fetching properties during initialization\n\n      this.fileUploadService.readProperties().subscribe(response => {\n        this.interval = parseInt(response.Timer, 10);\n        console.log('Interval is:', this.interval);\n      });\n    }\n\n    ngAfterViewInit() {// Modal handling logic can be added here if necessary\n    }\n\n    ngOnInit() {\n      // Accessing pData from the window object safely\n      const pData = window.pData;\n\n      if (pData) {\n        this.ActivityID = pData.ActivityID;\n        this.EngineName = pData.EngineName;\n        this.ProcessInstanceID = pData.ProcessInstanceID;\n        this.WorkItemID = pData.WorkItemID;\n        this.SessionID = pData.SessionID;\n        this.RouteID = pData.RouteID;\n      }\n\n      console.log(this.ActivityID, this.EngineName);\n      this.fileUploadService.readProperties();\n    }\n\n    closeScreen() {\n      window.close();\n    }\n\n    onFileChanged(event) {\n      this.isLoading = true;\n      let unsupportedFileFound = false;\n      let UpdatedfileName;\n      Array.from(event.target.files).forEach(file => {\n        var _a;\n\n        UpdatedfileName = file.name.replace(/&/g, ' '); // Replace '&' with a space\n\n        file = new File([file], UpdatedfileName, {\n          type: file.type\n        });\n        const fileExtension = (_a = file.name.split('.').pop()) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n\n        if (!this.allowedExtensions.includes(fileExtension || '')) {\n          unsupportedFileFound = true; //alert('File Format not supported');\n        } else {\n          const uniqueFileName = this.generateUniqueFileName(file.name);\n\n          if (this.isFileAlreadyExists(uniqueFileName)) {\n            alert('Error: File with the same name already exists.');\n          } else {\n            // file = new File([file], uniqueFileName, { type: file.type }); // Create a new File object with the updated name\n            file.uniqueName = uniqueFileName; // Adding uniqueName to File object\n\n            this.fileList.push(file);\n            this.listOfFiles.push(uniqueFileName);\n            console.log(\"FileList:: \", this.fileList);\n            console.log(\"listOfFiles:: \", this.listOfFiles);\n          }\n        }\n      });\n\n      if (unsupportedFileFound) {\n        alert('File Format not supported');\n      }\n\n      this.isLoading = false;\n    }\n\n    resetFileInput() {\n      if (this.fileInput) {\n        this.fileInput.nativeElement.value = ''; // Reset the file input\n      }\n    }\n\n    generateUniqueFileName(fileName) {\n      return fileName; // This can be enhanced to generate truly unique names\n    }\n\n    isFileAlreadyExists(uniqueFileName) {\n      return this.listOfFiles.includes(uniqueFileName);\n    }\n\n    removeSelectedFile(index) {\n      this.listOfFiles.splice(index, 1);\n      this.fileList.splice(index, 1);\n\n      if (this.listOfFiles.length === 0 && this.fileList.length === 0) {\n        this.resetFileInput();\n      }\n    }\n\n    uploadFiles() {\n      if (this.fileList.length === 0) {\n        alert('Please attach document to proceed.');\n        return;\n      }\n\n      this.spinnerService.show();\n      let parameters = {\n        ActivityID: this.ActivityID,\n        EngineName: this.EngineName,\n        ProcessInstanceID: this.ProcessInstanceID,\n        WorkItemID: this.WorkItemID,\n        SessionID: this.SessionID,\n        RouteID: this.RouteID\n      };\n      const formData = new FormData();\n      formData.append('properties', JSON.stringify(parameters));\n      this.fileList.forEach(file => {\n        formData.append('files', file);\n      });\n      this.fileUploadService.uploadFiles(formData).subscribe(response => {\n        console.log(response);\n        let resultObj = response;\n\n        if (resultObj.Status === '0') {\n          this.spinnerMessage = resultObj.response;\n          this.caseNo = resultObj.CASE_NO;\n          const param = {\n            ProcessInstanceID: this.caseNo,\n            SessionID: this.SessionID,\n            EngineName: this.EngineName\n          };\n          setInterval(() => this.callServlet(param), this.interval);\n        }\n      }, error => {\n        console.error('Error during file upload:', error);\n        this.spinnerService.hide();\n        alert('Some error occurred.');\n        window.close();\n      });\n    }\n\n    callServlet(dataForClassified) {\n      this.fileUploadService.checkClassified(dataForClassified).subscribe(response => {\n        if (response.response.toLowerCase() === 'yes') {\n          this.spinnerService.hide();\n          const UrlPrefix1 = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n          const servleturl1 = `${UrlPrefix1}/MUHDMS/servlet/RedirectJSP`;\n          window.location.href = `${servleturl1}?ProcessInstanceID=${encodeURIComponent(this.caseNo)}` + `&WorkitemID=${encodeURIComponent(this.WorkItemID)}` + `&QueueId=${encodeURIComponent(this.ActivityID)}` + `&RouteId=${encodeURIComponent(this.RouteID)}`;\n        }\n      }, error => {\n        console.error('Error sending redirect request:', error);\n      });\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.FileUploadService), i0.ɵɵdirectiveInject(i2.NgxSpinnerService));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    viewQuery: function AppComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.attachment = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.uploadModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);\n      }\n    },\n    decls: 26,\n    vars: 5,\n    consts: [[\"id\", \"uploadModal\", \"tabindex\", \"-1\", \"aria-labelledby\", \"uploadModalLabel\", \"aria-hidden\", \"true\", \"data-bs-backdrop\", \"static\", \"data-bs-keyboard\", \"false\", 1, \"modal\", \"fade\"], [\"uploadModal\", \"\"], [1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [\"id\", \"uploadModalLabel\", 1, \"modal-title\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"btn-close\", 3, \"click\"], [1, \"modal-body\"], [1, \"container\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"text-success\", \"mt-2\", 2, \"font-size\", \"0.9em\"], [\"type\", \"file\", \"multiple\", \"\", 2, \"display\", \"none\", 3, \"change\"], [\"fileInput\", \"\"], [\"class\", \"file-item\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"loading\", 4, \"ngIf\"], [1, \"modal-footer\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", 1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"size\", \"medium\", 3, \"type\"], [1, \"file-item\"], [1, \"file-name\"], [1, \"delete-button\", \"btn\", \"btn-danger\", 3, \"click\"], [1, \"loading\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r8 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h5\", 5);\n        i0.ɵɵtext(6, \"Upload Files\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_7_listener() {\n          return ctx.closeScreen();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 7)(9, \"div\", 8)(10, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_10_listener() {\n          i0.ɵɵrestoreView(_r8);\n\n          const _r1 = i0.ɵɵreference(15);\n\n          return i0.ɵɵresetView(_r1.click());\n        });\n        i0.ɵɵtext(11, \"Select Files\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"p\", 10);\n        i0.ɵɵtext(13, \" Supported file formats: pdf, tif, tiff, jpg, jpeg, png \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"input\", 11, 12);\n        i0.ɵɵlistener(\"change\", function AppComponent_Template_input_change_14_listener($event) {\n          return ctx.onFileChanged($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(16, AppComponent_div_16_Template, 5, 1, \"div\", 13);\n        i0.ɵɵtemplate(17, AppComponent_p_17_Template, 2, 0, \"p\", 14);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\", 15)(19, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_19_listener() {\n          return ctx.uploadFiles();\n        });\n        i0.ɵɵtext(20, \" Upload \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"button\", 17);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_21_listener() {\n          return ctx.closeScreen();\n        });\n        i0.ɵɵtext(22, \" Close \");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(23, \"ngx-spinner\", 18)(24, \"p\");\n        i0.ɵɵtext(25);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(16);\n        i0.ɵɵproperty(\"ngForOf\", ctx.listOfFiles);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !ctx.fileList.length);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"type\", ctx.typeSelected);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.spinnerMessage);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i2.NgxSpinnerComponent],\n    styles: [\".container[_ngcontent-%COMP%]{padding:20px;border:1px solid #ccc;border-radius:5px}.file-item[_ngcontent-%COMP%]{display:flex;align-items:center;margin-bottom:10px}.file-name[_ngcontent-%COMP%]{margin-right:10px}.delete-button[_ngcontent-%COMP%]{background-color:red;color:#fff;border:none;padding:5px 10px;border-radius:5px;cursor:pointer;margin-left:auto}.loading[_ngcontent-%COMP%]{margin-top:10px;font-style:italic}p[_ngcontent-%COMP%]{font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Open Sans,Helvetica Neue,sans-serif;margin-top:100px;color:#f5f5f5;font-size:large}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
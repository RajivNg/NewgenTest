{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./../shared/file-upload-service.service\";\nimport * as i2 from \"ngx-spinner\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = [\"attachments\"];\nconst _c1 = [\"uploadModal\"];\nconst _c2 = [\"fileInput\"];\n\nfunction AppComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 18)(1, \"div\", 19);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_18_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const index_r6 = restoredCtx.index;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.removeSelectedFile(index_r6));\n    });\n    i0.ɵɵtext(4, \"Delete\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const selected_r5 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(selected_r5);\n  }\n}\n\nfunction AppComponent_p_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 21);\n    i0.ɵɵtext(1, \"Loading...\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(fileUploadService, spinnerService) {\n      this.fileUploadService = fileUploadService;\n      this.spinnerService = spinnerService;\n      this.typeSelected = 'ball-fussion';\n      this.fileList = [];\n      this.listOfFiles = [];\n      this.isLoading = false;\n      this.ActivityID = \"\";\n      this.EngineName = \"\";\n      this.ProcessInstanceID = \"\";\n      this.RouteID = \"\";\n      this.SessionID = \"\";\n      this.WorkItemID = \"\";\n      this.spinnerMessage = \"Please wait while we are uploading your documents\";\n      this.caseNo = \"\";\n      this.interval = 1000;\n      this.fileUploadService.readProperties().subscribe(response => {\n        console.log(response);\n        let resultObj = response;\n        this.interval = parseInt(resultObj.Timer);\n        console.log(\"interval is---\" + this.interval);\n      });\n    }\n\n    ngAfterViewInit() {// const modalElement = this.elementRef.nativeElement.querySelector('#uploadModal');\n      // this.renderer.addClass(modalElement, 'show');\n      // this.renderer.setStyle(modalElement, 'display', 'block');\n    }\n\n    ngOnInit() {\n      const pData = window.pData;\n      this.ActivityID = pData.ActivityID;\n      this.EngineName = pData.EngineName;\n      this.ProcessInstanceID = pData.ProcessInstanceID;\n      this.WorkItemID = pData.WorkItemID;\n      this.SessionID = pData.SessionID;\n      this.RouteID = pData.RouteID;\n      console.log(this.ActivityID);\n      console.log(this.EngineName);\n      this.fileUploadService.readProperties();\n    }\n\n    closeScreen() {\n      window.close();\n    }\n\n    onFileChanged(event) {\n      this.isLoading = true;\n\n      for (var i = 0; i <= event.target.files.length - 1; i++) {\n        var selectedFile = event.target.files[i];\n        var uniqueFileName = this.generateUniqueFileName(selectedFile.name);\n\n        if (this.isFileAlreadyExists(uniqueFileName)) {\n          alert('Error: File with the same name already exists.');\n        } else {\n          selectedFile.uniqueName = uniqueFileName; // Add a property to store the unique file name\n\n          this.fileList.push(selectedFile);\n          this.listOfFiles.push(uniqueFileName);\n        }\n      }\n\n      this.isLoading = false;\n    }\n\n    resetFileInput() {\n      if (this.fileInput) {\n        this.fileInput.nativeElement.value = ''; // Reset the file input value\n      }\n    }\n\n    generateUniqueFileName(fileName) {\n      return fileName; // Return the file name as is, without adding a timestamp\n    }\n\n    isFileAlreadyExists(uniqueFileName) {\n      return this.listOfFiles.includes(uniqueFileName);\n    }\n\n    removeSelectedFile(index) {\n      // Delete the item from fileNames list\n      this.listOfFiles.splice(index, 1); // delete file from FileList\n\n      this.fileList.splice(index, 1);\n\n      if (this.listOfFiles.length === 0 && this.fileList.length === 0) {\n        this.resetFileInput(); // Reset file input if no files are left\n      }\n    }\n\n    uploadFiles() {\n      console.log(\"no fo files to upload--\" + this.fileList.length);\n\n      if (this.fileList.length != 0) {\n        this.spinnerService.show();\n        let parameters = {};\n        parameters['ActivityID'] = this.ActivityID;\n        parameters['EngineName'] = this.EngineName;\n        parameters['ProcessInstanceID'] = this.ProcessInstanceID;\n        parameters['WorkItemID'] = this.WorkItemID;\n        parameters['SessionID'] = this.SessionID;\n        parameters['RouteID'] = this.RouteID;\n        const formData = new FormData();\n        formData.append(\"properties\", JSON.stringify(parameters));\n\n        for (let file of this.fileList) {\n          formData.append('files', file);\n        }\n\n        this.fileUploadService.uploadFiles(formData).subscribe(response => {\n          console.log(response);\n          let resultObj = response;\n          console.log('Files uploaded successfully!');\n\n          if (resultObj.Status == \"0\") {\n            this.spinnerMessage = resultObj.response;\n            this.caseNo = resultObj.CASE_NO;\n            let param = {\n              \"ProcessInstanceID\": this.caseNo,\n              \"SessionID\": this.SessionID,\n              \"EngineName\": this.EngineName\n            };\n            setInterval(() => {\n              this.callServlet(param);\n            }, this.interval);\n          }\n        }, error => {\n          console.error('An error occurred during file upload:', error);\n          this.spinnerService.hide();\n          alert(\"Some Error Occured\");\n          window.close(); // Handle error case\n        });\n      } else {\n        alert(\"Please attach document to proceed.\");\n      }\n    }\n\n    callServlet(dataForClassified) {\n      this.fileUploadService.checkClassified(dataForClassified).subscribe(response => {\n        // Handle the response from the servlet\n        console.log(response);\n        let resultObj = response;\n        console.log('checking classified column');\n\n        if (resultObj.response == \"YES\" || resultObj.response == \"Yes\") {\n          this.spinnerService.hide();\n          console.log('Data extracted successfully');\n          let UrlPrefix1 = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n          let servleturl1;\n          servleturl1 = UrlPrefix1 + \"/MUHDMS/servlet/RedirectJSP\";\n          const ProcessInstanceID = this.caseNo;\n          const WorkitemID = this.WorkItemID;\n          const QueueId = this.ActivityID;\n          const RouteId = this.RouteID;\n          window.location.href = servleturl1 + \"?ProcessInstanceID=\" + encodeURIComponent(ProcessInstanceID) + \"&WorkitemID=\" + encodeURIComponent(WorkitemID) + \"&QueueId=\" + encodeURIComponent(QueueId) + \"&RouteId=\" + encodeURIComponent(RouteId);\n        }\n      }, error => {\n        // Handle any errors that occur during the HTTP request\n        console.error('Error sending redirect request:', error);\n      });\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.FileUploadService), i0.ɵɵdirectiveInject(i2.NgxSpinnerService));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    viewQuery: function AppComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.attachment = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.uploadModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);\n      }\n    },\n    decls: 28,\n    vars: 5,\n    consts: [[\"id\", \"uploadModal\", \"tabindex\", \"-1\", \"aria-labelledby\", \"uploadModalLabel\", \"aria-hidden\", \"true\", \"data-bs-backdrop\", \"static\", \"data-bs-keyboard\", \"false\", 1, \"modal\", \"fade\"], [\"uploadModal\", \"\"], [1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [\"id\", \"uploadModalLabel\", 1, \"modal-title\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"btn-close\", 3, \"click\"], [1, \"modal-body\"], [1, \"container\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [\"type\", \"file\", \"multiple\", \"\", 2, \"display\", \"none\", 3, \"change\"], [\"fileInput\", \"\"], [\"class\", \"file-item\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"loading\", 4, \"ngIf\"], [1, \"modal-footer\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", 1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"size\", \"medium\", 3, \"type\"], [1, \"file-item\"], [1, \"file-name\"], [1, \"delete-button\", 3, \"click\"], [1, \"loading\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r9 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\")(6, \"h5\", 5);\n        i0.ɵɵtext(7, \"Upload Files\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_8_listener() {\n          return ctx.closeScreen();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\", 7)(10, \"div\", 8)(11, \"div\")(12, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_12_listener() {\n          i0.ɵɵrestoreView(_r9);\n\n          const _r1 = i0.ɵɵreference(15);\n\n          return i0.ɵɵresetView(_r1.click());\n        });\n        i0.ɵɵtext(13, \"Select File\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"input\", 10, 11);\n        i0.ɵɵlistener(\"change\", function AppComponent_Template_input_change_14_listener($event) {\n          return ctx.onFileChanged($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"input\", 10, 11);\n        i0.ɵɵlistener(\"change\", function AppComponent_Template_input_change_16_listener($event) {\n          return ctx.onFileChanged($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(18, AppComponent_div_18_Template, 5, 1, \"div\", 12);\n        i0.ɵɵtemplate(19, AppComponent_p_19_Template, 2, 0, \"p\", 13);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"div\", 14)(21, \"button\", 15);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_21_listener() {\n          return ctx.uploadFiles();\n        });\n        i0.ɵɵtext(22, \"Upload\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_23_listener() {\n          return ctx.closeScreen();\n        });\n        i0.ɵɵtext(24, \"Close\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(25, \"ngx-spinner\", 17)(26, \"p\");\n        i0.ɵɵtext(27);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(18);\n        i0.ɵɵproperty(\"ngForOf\", ctx.listOfFiles);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !ctx.fileList.length);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"type\", ctx.typeSelected);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.spinnerMessage);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i2.NgxSpinnerComponent],\n    styles: [\".container[_ngcontent-%COMP%]{padding:20px;border:1px solid #ccc;border-radius:5px}.file-item[_ngcontent-%COMP%]{display:flex;align-items:center;margin-bottom:10px}.file-name[_ngcontent-%COMP%]{margin-right:10px}.delete-button[_ngcontent-%COMP%]{background-color:red;color:#fff;border:none;padding:5px 10px;border-radius:5px;cursor:pointer;margin-left:auto}.loading[_ngcontent-%COMP%]{margin-top:10px;font-style:italic}p[_ngcontent-%COMP%]{font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Open Sans,Helvetica Neue,sans-serif;margin-top:100px;color:#f5f5f5;font-size:large}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nlet AppComponent = class AppComponent {\n  constructor(elementRef, renderer, fileUploadService, spinnerService) {\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.fileUploadService = fileUploadService;\n    this.spinnerService = spinnerService;\n    this.fileList = [];\n    this.listOfFiles = [];\n    this.isLoading = false;\n    this.ActivityID = \"\";\n    this.EngineName = \"\";\n    this.ProcessInstanceID = \"\";\n    this.RouteID = \"\";\n    this.SessionID = \"\";\n    this.WorkItemID = \"\";\n    this.spinnerMessage = \"Please wait while we are uploading your documents\";\n    this.caseNo = \"\";\n    this.interval = 1000;\n    this.typeSelected = 'ball-fussion';\n    this.fileUploadService.readProperties().subscribe(response => {\n      console.log(response);\n      let resultObj;\n      resultObj = response;\n      this.interval = parseInt(resultObj.Timer);\n      console.log(\"interval is---\" + this.interval);\n    });\n  }\n\n  ngAfterViewInit() {// const modalElement = this.elementRef.nativeElement.querySelector('#uploadModal');\n    // this.renderer.addClass(modalElement, 'show');\n    // this.renderer.setStyle(modalElement, 'display', 'block');\n  }\n\n  ngOnInit() {\n    const pData = window.pData;\n    this.ActivityID = pData.ActivityID;\n    this.EngineName = pData.EngineName;\n    this.ProcessInstanceID = pData.ProcessInstanceID;\n    this.WorkItemID = pData.WorkItemID;\n    this.SessionID = pData.SessionID;\n    this.RouteID = pData.RouteID;\n    console.log(this.ActivityID);\n    console.log(this.EngineName);\n    this.fileUploadService.readProperties();\n  }\n\n  closeScreen() {\n    window.close();\n  }\n\n  onFileChanged(event) {\n    this.isLoading = true;\n\n    for (var i = 0; i <= event.target.files.length - 1; i++) {\n      var selectedFile = event.target.files[i];\n      var fileName = selectedFile.name;\n      var uniqueFileName = this.generateUniqueFileName(fileName);\n\n      if (this.isFileAlreadyExists(uniqueFileName)) {\n        // File with the same name already exists, display an error\n        alert('Error: File with the same name already exists.');\n      } else {\n        selectedFile.uniqueName = uniqueFileName; // Add a property to store the unique file name\n\n        this.fileList.push(selectedFile);\n        this.listOfFiles.push(uniqueFileName);\n      }\n    }\n\n    this.isLoading = false;\n  }\n\n  resetFileInput() {\n    if (this.fileInput) {\n      this.fileInput.nativeElement.value = ''; // Reset the file input value\n    }\n  }\n\n  generateUniqueFileName(fileName) {\n    return fileName; // Return the file name as is, without adding a timestamp\n  }\n\n  isFileAlreadyExists(uniqueFileName) {\n    return this.listOfFiles.includes(uniqueFileName);\n  }\n\n  removeSelectedFile(index) {\n    // Delete the item from fileNames list\n    this.listOfFiles.splice(index, 1); // delete file from FileList\n\n    this.fileList.splice(index, 1);\n\n    if (this.listOfFiles.length === 0 && this.fileList.length === 0) {\n      this.resetFileInput(); // Reset file input if no files are left\n    }\n  }\n\n  uploadFiles() {\n    console.log(\"no fo files to upload--\" + this.fileList.length);\n\n    if (this.fileList.length != 0) {\n      this.spinnerService.show();\n      let parameters = {};\n      parameters['ActivityID'] = this.ActivityID;\n      parameters['EngineName'] = this.EngineName;\n      parameters['ProcessInstanceID'] = this.ProcessInstanceID;\n      parameters['WorkItemID'] = this.WorkItemID;\n      parameters['SessionID'] = this.SessionID;\n      parameters['RouteID'] = this.RouteID;\n      const formData = new FormData();\n      formData.append(\"properties\", JSON.stringify(parameters));\n\n      for (let file of this.fileList) {\n        formData.append('files', file);\n      }\n\n      this.fileUploadService.uploadFiles(formData).subscribe(response => {\n        console.log(response);\n        let resultObj;\n        resultObj = response;\n        console.log('Files uploaded successfully!');\n\n        if (resultObj.Status == \"0\") {\n          this.spinnerMessage = resultObj.response;\n          this.caseNo = resultObj.CASE_NO;\n          let param = {\n            \"ProcessInstanceID\": this.caseNo,\n            \"SessionID\": this.SessionID,\n            \"EngineName\": this.EngineName\n          };\n          setInterval(() => {\n            this.callServlet(param);\n          }, this.interval);\n        }\n      }, error => {\n        console.error('An error occurred during file upload:', error);\n        this.spinnerService.hide();\n        alert(\"Some Error Occured\");\n        window.close(); // Handle error case\n      });\n    } else {\n      alert(\"Please attach document to proceed.\");\n    }\n  }\n\n  callServlet(dataForClassified) {\n    this.fileUploadService.checkClassified(dataForClassified).subscribe(response => {\n      // Handle the response from the servlet\n      console.log(response);\n      let resultObj;\n      resultObj = response;\n      console.log('checking classified column');\n\n      if (resultObj.response == \"YES\" || resultObj.response == \"Yes\") {\n        this.spinnerService.hide();\n        console.log('Data extracted successfully');\n        let UrlPrefix1 = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n        let servleturl1;\n        servleturl1 = UrlPrefix1 + \"/MUHDMS/servlet/RedirectJSP\";\n        const ProcessInstanceID = this.caseNo;\n        const WorkitemID = this.WorkItemID;\n        const QueueId = this.ActivityID;\n        const RouteId = this.RouteID;\n        window.location.href = servleturl1 + \"?ProcessInstanceID=\" + encodeURIComponent(ProcessInstanceID) + \"&WorkitemID=\" + encodeURIComponent(WorkitemID) + \"&QueueId=\" + encodeURIComponent(QueueId) + \"&RouteId=\" + encodeURIComponent(RouteId);\n      }\n    }, error => {\n      // Handle any errors that occur during the HTTP request\n      console.error('Error sending redirect request:', error);\n    });\n  }\n\n};\n\n__decorate([ViewChild('attachments')], AppComponent.prototype, \"attachment\", void 0);\n\n__decorate([ViewChild('uploadModal')], AppComponent.prototype, \"uploadModal\", void 0);\n\n__decorate([ViewChild('fileInput')], AppComponent.prototype, \"fileInput\", void 0);\n\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module"}